const NotificationService = require('./notificationService');
const TransactionService = require('./transactionService');
const Database = require('./database');

async function testNotificationSystem() {
    console.log('๐ ุจุฏุก ุงุฎุชุจุงุฑ ูุธุงู ุงูุฅุดุนุงุฑุงุช ุงููุงููุฉ ุงูููุญุฏ...\n');

    // Initialize services
    const notificationService = new NotificationService();
    const transactionService = new TransactionService();
    const database = new Database();
    
    await notificationService.init();
    await transactionService.init();
    await database.init();

    try {
        // Test company ID from our previous test
        const companyId = 10;
        const userId = 19; // Manager user

        console.log('๐ Step 1: ุชููุฆุฉ ุงูุฅุนุฏุงุฏุงุช ุงูุงูุชุฑุงุถูุฉ ููุฅุดุนุงุฑุงุช...');
        const initResult = await notificationService.initializeDefaultSettings(companyId, userId);
        console.log(`Result: ${initResult.message}\n`);

        console.log('๐ Step 2: ุงุณุชุนุฑุงุถ ุฅุนุฏุงุฏุงุช ุงูุฅุดุนุงุฑุงุช...');
        const settings = await database.getNotificationSettingsByCompany(companyId);
        console.log(`โ ุชู ุงูุนุซูุฑ ุนูู ${settings.length} ุฅุนุฏุงุฏุงุช ููุดุฑูุฉ:`);
        settings.forEach(setting => {
            const channelsStr = Array.isArray(setting.channels) ? setting.channels.join(', ') : setting.channels;
            console.log(`   - ${setting.transaction_type}: ${setting.is_enabled ? 'ููุนู' : 'ูุนุทู'} | ูููุงุช: ${channelsStr}`);
        });
        console.log('');

        console.log('๐ Step 3: ุงุณุชุนุฑุงุถ ููุงูุจ ุงูุฑุณุงุฆู...');
        const templates = await database.getMessageTemplates(companyId);
        console.log(`โ ุชู ุงูุนุซูุฑ ุนูู ${templates.length} ูุงูุจ ุฑุณุงูุฉ:`);
        templates.slice(0, 3).forEach(template => {
            console.log(`   - ${template.template_name} (${template.channel})`);
            console.log(`     ุงููุญุชูู: ${template.content.substring(0, 80)}...`);
        });
        console.log('');

        // Create test subscriber
        console.log('๐ Step 4: ุฅูุดุงุก ูุดุชุฑู ุชุฌุฑูุจู...');
        const subscriberData = {
            company_id: companyId,
            full_name: 'ุนุจุฏุงููู ุฃุญูุฏ ุงููุญูุฏ',
            address: 'ุงูุฑูุงุถุ ุญู ุงูููุถุฉ',
            phone: '+966501234567',
            business_type: 'ุณููู',
            connection_amount: 500,
            created_by: userId
        };

        // Get next account number
        const accountNumber = await database.getNextSubscriberAccountNumber(companyId);
        subscriberData.account_number = accountNumber;

        const subscriberId = await database.saveSubscriber(subscriberData);
        console.log(`โ ุชู ุฅูุดุงุก ุงููุดุชุฑู: ${subscriberData.full_name} - ุฑูู ุงูุญุณุงุจ: ${accountNumber}\n`);

        // Get the saved subscriber
        const subscriber = await database.getSubscriberById(subscriberId, companyId);

        console.log('๐ Step 5: ุฅูุดุงุก ูุนุงููุฉ ูุงููุฉ ูุงุฎุชุจุงุฑ ุงูุฅุดุนุงุฑุงุช ุงูุชููุงุฆูุฉ...');
        const transactionData = {
            company_id: companyId,
            transaction_type: 'cash_receipt',
            amount: 1500.00,
            description: 'ุฏูุนุฉ ุฑุจุท ุงูุชูุงุฑ ุงูููุฑุจุงุฆู',
            transaction_date: new Date().toISOString().split('T')[0],
            reference_number: 'REF-001',
            subscriber_id: subscriberId
        };

        const result = await transactionService.createTransaction(transactionData, userId);
        console.log(`โ ุชู ุฅูุดุงุก ุงููุนุงููุฉ: ${result.transaction.electronic_number}\n`);

        console.log('๐ Step 6: ุงุณุชุนุฑุงุถ ุณุฌูุงุช ุงูุฅุดุนุงุฑุงุช...');
        // Wait a bit for notifications to be processed
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const logs = await database.getNotificationLogsByCompany(companyId, 10, 0);
        console.log(`โ ุชู ุงูุนุซูุฑ ุนูู ${logs.length} ุณุฌู ุฅุดุนุงุฑ:`);
        logs.forEach(log => {
            console.log(`   - ${log.channel.toUpperCase()} ุฅูู ${log.recipient}`);
            console.log(`     ุงูุญุงูุฉ: ${log.status} | ุงูุชุงุฑูุฎ: ${new Date(log.created_at).toLocaleString('ar-SA')}`);
            console.log(`     ุงููุญุชูู: ${log.content.substring(0, 100)}...`);
        });
        console.log('');

        console.log('๐ ุชู ุงุฎุชุจุงุฑ ุงููุธุงู ุจูุฌุงุญ! โ');
        console.log('\n๐ ููุฎุต ุงููุชุงุฆุฌ:');
        console.log(`โ ุฅุนุฏุงุฏุงุช ุงูุฅุดุนุงุฑุงุช: ${settings.length} ููุน ูุนุงููุฉ`);
        console.log(`โ ููุงูุจ ุงูุฑุณุงุฆู: ${templates.length} ูุงูุจ`);
        console.log(`โ ุงููุนุงููุงุช ุงูููุดุฃุฉ: 1 ูุนุงููุฉ`);
        console.log(`โ ุงูุฅุดุนุงุฑุงุช ุงููุฑุณูุฉ: ${logs.length} ุฅุดุนุงุฑ`);

    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงููุธุงู:', error.message);
    } finally {
        // Close connections
        database.close();
        notificationService.close();
        transactionService.close();
    }
}

// Run the test
testNotificationSystem().catch(console.error);